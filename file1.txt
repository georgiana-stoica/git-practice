import React, { useState, useEffect } from 'react';
import dayjs from 'dayjs';
import { DemoContainer, DemoItem } from '@mui/x-date-pickers/internals/demo';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DateCalendar } from '@mui/x-date-pickers/DateCalendar';
import './Maturity.css';
import { getBondsByMaturity } from '../services/maturity-service';

const Maturity = () => {
    const [selectedDate, setSelectedDate] = useState(dayjs('2021-08-12'));
    const [bondsData, setBondsData] = useState([]);

    useEffect(() => {
        getMaturity();
    }, []);

    const getMaturity = () => {
        getBondsByMaturity()
            .then(res => {
                console.log("API Response:", res.data); // Check the response data
                if (Array.isArray(res.data)) {
                    const bondsWithIsoDates = res.data.map(bond => ({
                        ...bond,
                        maturityDate: dayjs(bond.maturityDate).format('YYYY-MM-DDTHH:mm:ssZ')
                    }));
                    setBondsData(bondsWithIsoDates);
                } else {
                    setBondsData([]);
                    console.log("Invalid data format:", res.data);
                }
            })
            .catch(err => {
                setBondsData([]);
                console.log(err);
            });
    };

    const handleDateChange = (newDate) => {
        setSelectedDate(newDate);
    };

    return (
        <LocalizationProvider dateAdapter={AdapterDayjs}>
            <DemoContainer components={['DateCalendar', 'DateCalendar']}>
                <DemoItem label="Choose date">
                    <DateCalendar value={selectedDate} onChange={handleDateChange} />
                </DemoItem>
            </DemoContainer>

            <div className="bond-list">
                {[...Array(11)].map((_, index) => {
                    const currentDate = selectedDate.subtract(5, 'day').add(index, 'day');
                    const filteredBonds = bondsData.filter(bond =>
                        dayjs(bond.maturityDate).isSame(currentDate, 'day')
                    );

                    return (
                        <div key={currentDate.format('YYYY-MM-DD')} className="bond-container">
                            <div className="bond-header">{currentDate.format('YYYY-MM-DD')}</div>
                            <div className="bond-body">
                                {filteredBonds.length === 0 ? (
                                    <p>No bonds existing for this day.</p>
                                ) : (
                                    filteredBonds.map(bond => (
                                        <div key={bond.isin} className="bond-box">
                                            <p>{bond.isin}</p>
                                            <p>{bond.details}</p>
                                        </div>
                                    ))
                                )}
                            </div>
                        </div>
                    );
                })}
            </div>
        </LocalizationProvider>
    );
};

export default Maturity;
